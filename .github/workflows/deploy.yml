name: Deploy to AWS Lambda

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  # TODO: Descomentar cuando los tests estén arreglados
  # test:
  #   runs-on: ubuntu-latest
  #   name: Run Tests
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'
  #         cache: 'pip'
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #     - name: Run tests with pytest
  #       run: |
  #         pytest -v --tb=short --cov=app --cov-report=term --cov-report=xml

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to AWS Lambda
    # needs: test  # Descomentar cuando tests estén activos
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          npm install
  
      - name: Install Serverless Framework
        run: npm install -g serverless  

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Deploy to AWS Lambda Production
        id: deploy
        env:
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        run: |
          echo "🚀 Starting deployment to production..."
          serverless deploy --stage prod --verbose
          echo "deploy_status=success" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Deployment Success
        if: steps.deploy.outputs.deploy_status == 'success'
        run: |
          echo "✅ Deployment to production completed successfully!"
          echo "🎉 Your API is now live!"
      
      - name: Deployment Failed
        if: steps.deploy.outputs.deploy_status != 'success'
        run: |
          echo "❌ Deployment to production failed!"
          echo "Please check the logs above for details"
          exit 1